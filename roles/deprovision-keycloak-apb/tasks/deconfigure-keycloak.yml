
- name: "Generate keycloak auth token"
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ ADMIN_NAME }}&password={{ ADMIN_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  until: keycloak_auth_response.status == 200
  retries: 600
  delay: 2

- name: Generate namespace specific realm
  template:
    src: namespace_realm.json.j2
    dest: /tmp/namespace_realm.json

- name: "Delete {{ namespace }} realm"
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms"
    method: DELETE
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: "Create {{ generated_username.stdout }} client in realm {{ namespace }}"
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ generated_username.stdout }}\", \"secret\": \"{{ generated_password.stdout }}\", \"redirectUris\":[\"http://localhost:*\"], \"webOrigins\":[\"http://localhost:8100\"] }"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: "Create {{ generated_username.stdout }}-bearer client in realm {{ namespace }}"
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ generated_username.stdout }}-bearer\", \"secret\": \"{{ generated_password.stdout }}\",\"bearerOnly\":true}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: Get installation details bearer
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms/{{ namespace }}/clients/{{ generated_username.stdout }}-bearer/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_bearer

-
  name: Get installation details
  uri:
    url: "{{ KEYCLOAK_HOST }}/auth/admin/realms/{{ namespace }}/clients/{{ generated_username.stdout }}/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_text

- set_fact: installation="{{ installation_text.content | from_json }}"

- name: Create client config from template
  template:
    src: installation.json.j2
    dest: /tmp/installation.json

- name: Retrieve client config
  shell: cat /tmp/installation.json
  register: installation_text

- set_fact: installation="{{ installation_text.stdout | from_json }}"
- set_fact: installationbearer="{{ installation_bearer.content | from_json }}"

- name: Create keycloak bearer client template
  template:
    src: secret.yml.j2
    dest: /tmp/secret.yaml

- name: Create keycloak public client secret
  shell: oc create -f /tmp/secret.yaml -n {{ namespace }}

- name: delete secret template file
  file: path=/tmp/secret.yaml state=absent

- name: encode admin user credentials
  asb_encode_binding:
    fields:
      ADMIN_NAME: "{{ ADMIN_NAME }}"
      ADMIN_PASSWORD: "{{ ADMIN_PASSWORD }}"
