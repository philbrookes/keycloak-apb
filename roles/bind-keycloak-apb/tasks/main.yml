-
  name: Generate Username
  shell: tr -d -c "a-zA-Z" < /dev/urandom | head -c 20
  register: generated_username

-
  name: Generate Password
  shell: tr -d -c "a-zA-Z0-9" < /dev/urandom | head -c 20
  register: generated_password

- 
  name: "Retrieve route to keycloak"
  shell: "oc get secret keycloak -o yaml -n {{ namespace }} | grep 'uri:' | awk '{print $2}' | openssl base64 -d | tr -d ' '"
  register: keycloak_route

- debug: var=keycloak_route

- name: "Generate keycloak auth token"
  uri:
    url: "{{ keycloak_route.stdout }}/auth/realms/master/protocol/openid-connect/token"
    method: POST
    body: "client_id=admin-cli&username={{ _apb_provision_creds.ADMIN_NAME }}&password={{ _apb_provision_creds.ADMIN_PASSWORD }}&grant_type=password"
    validate_certs: no
  register: keycloak_auth_response
  until: keycloak_auth_response.status == 200
  retries: 600
  delay: 2

-
  name: "Create {{ service }}-bearer client in realm {{ namespace }}"
  uri:
    url: "{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients"
    method: POST
    body: "{\"id\": \"{{ service}}-bearer\", \"secret\": \"{{ generated_password.stdout }}\",\"bearerOnly\":true}"
    validate_certs: no
    body_format: json
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 201

-
  name: Get installation details bearer
  uri:
    url: "{{ keycloak_route.stdout }}/auth/admin/realms/{{ namespace }}/clients/{{ service}}-bearer/installation/providers/keycloak-oidc-keycloak-json"
    method: GET
    validate_certs: no
    headers:
      Authorization: "bearer {{ keycloak_auth_response.json.access_token }}"
    status_code: 200
    return_content: yes
  register: installation_bearer

- name: encode {{ service }} credentials
  asb_encode_binding:
    fields:
      name: "keycloak-bearer"
      resource: "{{ service }}-bearer"
      bearer_installation: "{{ installation_bearer.content }}"
      uri: "{{ keycloak_route.stdout }}"
      client_id: "{{ generated_username.stdout }}"
      client_secret: "{{ generated_password.stdout }}"
